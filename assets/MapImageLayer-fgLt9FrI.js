import{ey as I,eA as $,d6 as T,d7 as M,d8 as O,d9 as E,ez as L,eH as R,eI as F,b5 as P,cg as v,c2 as f,eJ as j,eK as J,b6 as b,ap as N,bz as U,eL as q,a as x,a8 as A,e as s,y as n,eM as S,bu as _,bn as k,df as z,c as V,ab as H,eN as K}from"./index-DElr3DcF.js";import{m as Z,f as B,Y as C}from"./SublayersOwner-l88rneU0.js";import{f as D}from"./TemporalLayer-DmnR6875.js";import{m as G}from"./ExportImageParameters-BoDLIOdQ.js";import{t as W}from"./imageBitmapUtils-B6BUN1-s.js";import{e as w}from"./sublayerUtils-BkRiQFwl.js";import{e as Y}from"./versionUtils-DNigW6jH.js";import"./UniqueValueRenderer-Dlcy8CbD.js";import"./ColorStop-CPzL79-t.js";import"./diffUtils-BdP3Q4GO.js";import"./colorRamps-CGI5U3rR.js";import"./jsonUtils-Bd8kafaQ.js";import"./FieldsIndex-CJITZ3St.js";import"./UnknownTimeZone-B0FOQs5Y.js";import"./heatmapUtils-BxdueKl5.js";import"./QueryTask-VZqYUTMs.js";import"./infoFor3D-DsOdlPuA.js";import"./executeForIds-C-S_T583.js";import"./query-D0gRgiJv.js";import"./pbfQueryUtils-Q4PAJW8z.js";import"./pbf-DkIy1y78.js";import"./queryZScale-DgmK6quE.js";import"./executeQueryJSON-Bv584em0.js";import"./FeatureSet-Qgz6edNk.js";import"./executeQueryPBF-C2YYFRVd.js";import"./FeatureType-ClP3R5sl.js";import"./FeatureTemplate-DcmsfQ1p.js";import"./LabelClass-C0H0U1Rv.js";import"./labelingInfo-ChXdYyaq.js";import"./LayerFloorInfo-D-84Q_CS.js";import"./serviceCapabilitiesUtils-BK0QV9M-.js";import"./AttachmentQuery-C_DcpQcv.js";import"./popupUtils-DQMj5JZu.js";import"./TimeInfo-99xUGBGN.js";import"./floorFilterUtils-DZ5C6FQv.js";let r=class extends I(D($(Z(B(T(M(O(E(L(R(F(H)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(P).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const l=i.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,l,t){var y,d,h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let p=!1;if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers)){const o=v(t.origin);if(o===f.PORTAL_ITEM){const g=this.createSublayersForOrigin("service").sublayers;p=w(a,g,f.SERVICE)}else if(o>f.PORTAL_ITEM){const g=this.createSublayersForOrigin("portal-item");p=w(a,g.sublayers,v(g.origin))}}const m=[],u={writeSublayerStructure:p,...t};let c=p;a.forEach(o=>{const g=o.write({},u);m.push(g),c=c||o.originOf("visible")==="user"}),m.some(o=>Object.keys(o).length>1)&&(i.layers=m),c&&(i.visibleLayers=a.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,i,l,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const p=new G({layer:this,floors:t==null?void 0:t.floors,scale:j({extent:e,width:i})*a}),m=p.toJSON();p.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,y=J(c);m.dpi*=a;const d={};if(t!=null&&t.timeExtent){const{start:h,end:o}=t.timeExtent.toJSON();d.time=h&&o&&h===o?""+h:`${h??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:i+","+l,...m,...u,...d}}async fetchImage(e,i,l,t){const{data:a}=await this._fetchImage("image",e,i,l,t);return a}async fetchImageBitmap(e,i,l,t){const{data:a,url:p}=await this._fetchImage("blob",e,i,l,t);return W(a,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await b(this.url,i),{extent:t,fullExtent:a,timeExtent:p}=l,m=t||a;return{fullExtent:m&&N.fromJSON(m),timeExtent:p&&U.fromJSON({start:p[0],end:p[1]})}}loadAll(){return q(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,i,l,t,a){var u,c,y;const p={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,l,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((u=p.query)==null?void 0:u.dynamicLayers)!=null&&!((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:d}=await b(m,p);return{data:d,url:m}}catch(d){throw A(d)?d:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:l}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([n(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([n()],r.prototype,"dpi",void 0),s([n()],r.prototype,"gdbVersion",void 0),s([n()],r.prototype,"imageFormat",void 0),s([_("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([n()],r.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([n(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([n()],r.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([k("sublayers",{layers:{type:[C]},visibleLayers:{type:[K]}})],r.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([n(z)],r.prototype,"url",void 0),r=s([V("esri.layers.MapImageLayer")],r);const je=r;export{je as default};
