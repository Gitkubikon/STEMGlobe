const __vite__fileDeps=["assets/ElevationQuery-TgJr7w5-.js","assets/index-Din4d8RI.js","assets/index-DRZRuSdj.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
import{d5 as m,d6 as w,d7 as g,d8 as b,d9 as T,da as f,db as S,a as _,b5 as I,b6 as p,dc as $,dd as O,_ as d,b0 as c,e as s,y as o,bu as h,de as E,df as D,c as L,ab as j}from"./index-Din4d8RI.js";let a=class extends m(w(g(b(T(j))))){constructor(...t){super(...t),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=f()}normalizeCtorArgs(t,i){return typeof t=="string"?{url:t,...i}:t}destroy(){this._lercDecoder=S(this._lercDecoder)}readCapabilities(t,i){const e=i.capabilities&&i.capabilities.split(",").map(r=>r.toLowerCase().trim());return e?{operations:{supportsTileMap:e.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(t,i){let e=i.currentVersion;return e||(e=9.3),e}load(t){const i=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords){for(let r=0;r<e.typeKeywords.length;r++)if(e.typeKeywords[r].toLowerCase()==="elevation 3d layer")return!0}throw new _("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},t).catch(I).then(()=>this._fetchImageService(i))),Promise.resolve(this)}fetchTile(t,i,e,r){const l=(r=r||{signal:null}).signal!=null?r.signal:r.signal=new AbortController().signal,u={responseType:"array-buffer",signal:l},v={noDataValue:r.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(t,i,e,r)).then(()=>p(this.getTileUrl(t,i,e),u)).then(n=>this._lercDecoder.decode(n.data,v,l)).then(n=>new $(n))}getTileUrl(t,i,e){const r=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=O({...this.parsedUrl.query,blankTile:!r&&null});return`${this.parsedUrl.path}/tile/${t}/${i}/${e}${l?"?"+l:""}`}async queryElevation(t,i){const{ElevationQuery:e}=await d(()=>import("./ElevationQuery-TgJr7w5-.js"),__vite__mapDeps([0,1,2]));return c(i),new e().query(this,t,i)}async createElevationSampler(t,i){const{ElevationQuery:e}=await d(()=>import("./ElevationQuery-TgJr7w5-.js"),__vite__mapDeps([0,1,2]));return c(i),new e().createSampler(this,t,i)}_fetchTileAvailability(t,i,e,r){return this.tilemapCache?this.tilemapCache.fetchAvailability(t,i,e,r):Promise.resolve("unknown")}async _fetchImageService(t){var r;if(this.sourceJSON)return this.sourceJSON;const i={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:t},e=await p(this.parsedUrl.path,i);e.ssl&&(this.url=(r=this.url)==null?void 0:r.replace(/^http:/i,"https:")),this.sourceJSON=e.data,this.read(e.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[y]}};s([o({readOnly:!0})],a.prototype,"capabilities",void 0),s([h("service","capabilities",["capabilities"])],a.prototype,"readCapabilities",null),s([o({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),s([o({readOnly:!0,type:E})],a.prototype,"heightModelInfo",void 0),s([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),s([o({type:["show","hide"]})],a.prototype,"listMode",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"minScale",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"maxScale",void 0),s([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],a.prototype,"opacity",void 0),s([o({type:["ArcGISTiledElevationServiceLayer"]})],a.prototype,"operationalLayerType",void 0),s([o()],a.prototype,"sourceJSON",void 0),s([o({json:{read:!1},value:"elevation",readOnly:!0})],a.prototype,"type",void 0),s([o(D)],a.prototype,"url",void 0),s([o()],a.prototype,"version",void 0),s([h("version",["currentVersion"])],a.prototype,"readVersion",null),a=s([L("esri.layers.ElevationLayer")],a);const y=Symbol("default-fetch-tile");a.prototype.fetchTile[y]=!0;const x=a;export{x as default};
