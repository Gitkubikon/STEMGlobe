import{a as $,bq as G,cz as L,b4 as P,k as z}from"./index-DqwbqM4t.js";import{n as T,a as F,m as w}from"./TimeOnly-CrWbdsfn.js";import{t as I}from"./ImmutableArray-BlMso3qf.js";import J from"./FeatureLayer-BSgRboEi.js";import{d as M}from"./FeatureSet-COnEEoH9.js";import"./UnknownTimeZone-BF3Mc5V5.js";import"./UniqueValueRenderer-B2fyT33R.js";import"./ColorStop-DXBAjvbr.js";import"./diffUtils-CzkSHqLg.js";import"./colorRamps-DsvQGJD0.js";import"./jsonUtils-BqS46ZGy.js";import"./FieldsIndex-CAsCG6zq.js";import"./heatmapUtils-SV6Gtgyf.js";import"./FormTemplate-CjHJEzuE.js";import"./editsZScale-BobntyGp.js";import"./queryZScale-DOzQzCzX.js";import"./EditBusLayer-CPXxwLY5.js";import"./FeatureEffectLayer-SmG017BG.js";import"./FeatureEffect-CTK_gEk6.js";import"./FeatureFilter-DBVrul2F.js";import"./FeatureLayerBase-COq3A6Jd.js";import"./featureLayerUtils-CC42Nymu.js";import"./featureQueryAll-C7vrS9oT.js";import"./AttachmentQuery-8FPcjD3X.js";import"./RelationshipQuery-BIk61q-4.js";import"./LayerFloorInfo-UOzBYObN.js";import"./serviceCapabilitiesUtils-Bt0UY949.js";import"./FeatureReductionLayer-Bp1T5Bo1.js";import"./FeatureReductionSelection-ZR43tbjO.js";import"./LabelClass-DZ6WneRs.js";import"./MD5-C9MwAd2G.js";import"./OrderedLayer-CvXv1mpo.js";import"./TemporalLayer-Bg8fsZ6K.js";import"./TimeInfo-Ccbv0mmZ.js";import"./FeatureTemplate-DOgU7JxB.js";import"./FeatureType-CADP1F6o.js";import"./fieldProperties-BGmCx23A.js";import"./labelingInfo-FcRHmrRJ.js";import"./versionUtils-Tz83-SMI.js";import"./styleUtils-BAemlcjJ.js";import"./TopFeaturesQuery-v7UWeP0Z.js";import"./popupUtils-17lgLWlR.js";import"./interfaces-CL2NbQte.js";let b=null;function q(e,n,a,o={}){const t=n.elementType,i="value",p=t.type==="array"?[{name:i,type:t.type,elementType:t.elementType}]:t.type==="dictionary"?[{name:i,type:t.type,properties:t.properties}]:[{name:i,type:t.type}];return new I(e.map(s=>{const r={};return g(r,p,{[i]:s},a,o),r[i]}))}function E(e,n,a={}){const o=e instanceof M?new J({source:e.features,geometryType:e.geometryType,fields:e.fields,spatialReference:e.spatialReference}):e;return n.constructFeatureSet(o,a.spatialReference,null,!0,a.lruCache,a.interceptor)}function N(e,n,a={}){const{spatialReference:o,interceptor:t,lruCache:i}=a;return typeof e=="string"?n.createFeatureSetCollectionFromService(e,o,i,t):n.createFeatureSetCollectionFromMap(e,o,i,t)}function Q(e,n,a,o={}){const t={};return g(t,n.properties,e,a,o),new b.Dictionary(t)}function g(e,n,a,o,t={}){const i={};for(const p of Object.keys(a))i[p.toLowerCase()]=a[p];for(const p of n){const s=p.name.toLowerCase();if(t.variablesPreProcessed)e[s]=i[s];else switch(p.type){case"array":{const r=i[s];e[s]=r==null?null:q(r,p,o,t);break}case"feature":{const r=i[s];e[s]=r==null?null:b.Feature.createFromGraphic(r,t==null?void 0:t.timeZone);break}case"featureSet":{const r=i[s];e[s]=r==null?null:o?E(r,o,t):null;break}case"featureSetCollection":{const r=i[s];e[s]=r==null?null:o?N(r,o,t):null;break}case"dictionary":{const r=i[s];e[s]=r==null?null:Q(r,p,o,t);break}case"date":{const r=i[s];e[s]=r?r instanceof w?r:t!=null&&t.timeZone?w.dateJSAndZoneToArcadeDate(r,t==null?void 0:t.timeZone):w.dateJSToArcadeDate(r):null;break}case"dateOnly":{const r=i[s];e[s]=r?r instanceof F?r:F.fromReader(r):null;break}case"time":{const r=i[s];e[s]=r?r instanceof T?r:T.fromReader(r):null;break}case"knowledgeGraph":case"geometry":case"boolean":case"text":case"number":e[s]=i[s]}}}function Z(e,n){for(const a of e)n.push(a),a.type==="dictionary"&&Z(a.properties,n);return n}function R(e,n,a,o,t){const{spatialReference:i,interceptor:p,lruCache:s,console:r,abortSignal:m,timeZone:l,services:S={portal:P.getDefault()}}=a,f={vars:{},spatialReference:i,interceptor:p,timeZone:l,lrucache:s,useAsync:t,services:S,console:r,abortSignal:m};return n&&g(f.vars,e.variables,n,o,a),f}function v(e,n){switch(n.getArcadeType(e)){case"number":case"text":case"boolean":case"point":case"polygon":case"polyline":case"multipoint":case"extent":return e;case"date":return e.toJSDate();case"time":case"dateOnly":return e.toString();case"feature":{const a=(e.type,e),o="geometry"in a?a.geometry():null,t="readAttributes"in a?a.readAttributes():a.attributes;return new z({geometry:o,attributes:t})}case"dictionary":{const a=e,o=a.attributes,t={};for(const i of Object.keys(o))t[i]=v(a.field(i),n);return t}case"array":return("toArray"in e?e.toArray():e).map(a=>v(a,n))}return e}const D={variables:[{name:"$feature",type:"feature"},{name:"$layer",type:"featureSet"},{name:"$datastore",type:"featureSetCollection"},{name:"$map",type:"featureSetCollection"},{name:"$userInput",type:"geometry"},{name:"$graph",type:"knowledgeGraph"}]},O={variables:[{name:"$feature",type:"feature"},{name:"$aggregatedFeatures",type:"featureSet"}]},U=new Map([["form-constraint",{variables:[{name:"$feature",type:"feature"}]}],["feature-z",{variables:[{name:"$feature",type:"feature"}]}],["field-calculation",{variables:[{name:"$feature",type:"feature"},{name:"$datastore",type:"featureSetCollection"}]}],["form-calculation",{variables:[{name:"$feature",type:"feature"},{name:"$originalFeature",type:"feature"},{name:"$layer",type:"featureSet"},{name:"$featureSet",type:"featureSet"},{name:"$datastore",type:"featureSetCollection"},{name:"$map",type:"featureSetCollection"},{name:"$editContext",type:"dictionary",properties:[{name:"editType",type:"text"}]}]}],["labeling",{variables:[{name:"$feature",type:"feature"}]}],["popup",D],["popup-element",D],["feature-reduction-popup",O],["feature-reduction-popup-element",O],["visualization",{variables:[{name:"$feature",type:"feature"},{name:"$view",type:"dictionary",properties:[{name:"scale",type:"number"}]}]}]]);function Ge(e){const n=U.get(e);if(!n){const a=Array.from(U.keys()).map(o=>`'${o}'`).join(", ");throw new $("createArcadeProfile:invalid-profile-name",`Invalid profile name '${e}'. You must specify one of the following values: ${a}`)}return G(n)}async function Le(e,n,a={}){b||(b=await L());const{arcade:o,arcadeUtils:t}=b,{loadScriptDependencies:i,referencesMember:p,scriptIsAsync:s}=o,r=Z(n.variables,[]),m=r.filter(c=>c.type==="featureSet"||c.type==="featureSetCollection").map(c=>c.name.toLowerCase()),l=o.parseScript(e,m);if(!l)throw new $("arcade:invalid-script","Unable to create SyntaxTree");const S=t.extractFieldNames(l),f=o.scriptTouchesGeometry(l),h=r.map(c=>c.name.toLowerCase()).filter(c=>p(l,c)),u=s(l,m);await i(l,u,m);const C={vars:{},spatialReference:null,useAsync:u};for(const c of h)C.vars[c]="any";const{lruCache:A}=a,k=o.compileScript(l,C),x=o.featureSetUtils(),{services:j}=a;return{execute:(c,y={})=>{if(u)throw new $("arcade:invalid-execution-mode","Cannot execute the script in synchronous mode");const d=k(R(n,c,{lruCache:A,...y},x,u));return y.rawOutput?d:v(d,t)},executeAsync:async(c,y={})=>{const d=await k(R(n,c,{lruCache:A,services:j,...y},x,u));return y.rawOutput?d:v(d,t)},isAsync:u,variablesUsed:h,fieldsUsed:S,geometryUsed:f,syntaxTree:l}}export{Le as createArcadeExecutor,Ge as createArcadeProfile};
